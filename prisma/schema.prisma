model Booking {
  id         Int      @id @default(autoincrement())
  userId     Int
  hotelId    Int
  checkIn    DateTime
  checkOut   DateTime
  totalPrice Float
  status     Status   @default(PENDING)
  paymentId  Int?    
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  hotel   Hotel  @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  payment Payment[]
}

model Destination {
  id        Int      @id @default(autoincrement())
  state     String   
  country   String  
  address   String 
  city      String 
  description  String
  hotels    Hotel[]  
  createdAt DateTime @default(now())     
  updatedAt DateTime @updatedAt 
}

model Hotel {
  id              Int      @id @default(autoincrement())
  name            String
  description     String
  destinationId   Int 
  propertyId      Int
  images          String
  pricePerNight   Int
  numberOfReviews Int  @default(0)

  reviews  Review[] 
  bookings Booking[] 


  destination Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade)
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())     
  updatedAt DateTime @updatedAt 
}

model Payment {
  id          Int      @id @default(autoincrement())
  bookingId   Int      // إزالة @unique
  totalPrice  Float
  purchasedAt DateTime @default(now())

  booking     Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Property {
  id          Int      @id @default(autoincrement())
  name        String 
  description String 
  hotels      Hotel[]  
}

model Review {
  id       Int      @id @default(autoincrement())
  comment  String 
  userId   Int
  hotelId  Int 
  rating   Int
  user     User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  hotel    Hotel @relation(fields: [hotelId], references: [id], onDelete: Cascade)
}

model User {
  id       Int      @id @default(autoincrement())
  name     String
  email    String   @unique
  password String?
  isAdmin  Boolean  @default(false)
  googleId  String?  @unique
  avatar    String?
  otp      Int?      
  optExires DateTime?
  bookings Booking[]
  reviews  Review[]  

}

enum Status {
  CONFIRMED
  PENDING
  CANCELLED
}



datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
